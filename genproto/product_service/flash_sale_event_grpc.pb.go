// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule/product_service/flash_sale_event.proto

package product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlashSaleEventService_CreateFlashSaleEvent_FullMethodName = "/product_service.FlashSaleEventService/CreateFlashSaleEvent"
	FlashSaleEventService_GetFlashSaleEvent_FullMethodName    = "/product_service.FlashSaleEventService/GetFlashSaleEvent"
	FlashSaleEventService_UpdateFlashSaleEvent_FullMethodName = "/product_service.FlashSaleEventService/UpdateFlashSaleEvent"
	FlashSaleEventService_DeleteFlashSaleEvent_FullMethodName = "/product_service.FlashSaleEventService/DeleteFlashSaleEvent"
	FlashSaleEventService_ListFlashSaleEvents_FullMethodName  = "/product_service.FlashSaleEventService/ListFlashSaleEvents"
)

// FlashSaleEventServiceClient is the client API for FlashSaleEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FlashSaleEventService defines the gRPC service for managing flash sale events.
type FlashSaleEventServiceClient interface {
	CreateFlashSaleEvent(ctx context.Context, in *CreateFlashSaleEventRequest, opts ...grpc.CallOption) (*CreateFlashSaleEventResponse, error)
	GetFlashSaleEvent(ctx context.Context, in *GetFlashSaleEventRequest, opts ...grpc.CallOption) (*GetFlashSaleEventResponse, error)
	UpdateFlashSaleEvent(ctx context.Context, in *UpdateFlashSaleEventRequest, opts ...grpc.CallOption) (*UpdateFlashSaleEventResponse, error)
	DeleteFlashSaleEvent(ctx context.Context, in *DeleteFlashSaleEventRequest, opts ...grpc.CallOption) (*DeleteFlashSaleEventResponse, error)
	ListFlashSaleEvents(ctx context.Context, in *ListFlashSaleEventsRequest, opts ...grpc.CallOption) (*ListFlashSaleEventsResponse, error)
}

type flashSaleEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashSaleEventServiceClient(cc grpc.ClientConnInterface) FlashSaleEventServiceClient {
	return &flashSaleEventServiceClient{cc}
}

func (c *flashSaleEventServiceClient) CreateFlashSaleEvent(ctx context.Context, in *CreateFlashSaleEventRequest, opts ...grpc.CallOption) (*CreateFlashSaleEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlashSaleEventResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventService_CreateFlashSaleEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventServiceClient) GetFlashSaleEvent(ctx context.Context, in *GetFlashSaleEventRequest, opts ...grpc.CallOption) (*GetFlashSaleEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlashSaleEventResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventService_GetFlashSaleEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventServiceClient) UpdateFlashSaleEvent(ctx context.Context, in *UpdateFlashSaleEventRequest, opts ...grpc.CallOption) (*UpdateFlashSaleEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFlashSaleEventResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventService_UpdateFlashSaleEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventServiceClient) DeleteFlashSaleEvent(ctx context.Context, in *DeleteFlashSaleEventRequest, opts ...grpc.CallOption) (*DeleteFlashSaleEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlashSaleEventResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventService_DeleteFlashSaleEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventServiceClient) ListFlashSaleEvents(ctx context.Context, in *ListFlashSaleEventsRequest, opts ...grpc.CallOption) (*ListFlashSaleEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlashSaleEventsResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventService_ListFlashSaleEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashSaleEventServiceServer is the server API for FlashSaleEventService service.
// All implementations must embed UnimplementedFlashSaleEventServiceServer
// for forward compatibility.
//
// FlashSaleEventService defines the gRPC service for managing flash sale events.
type FlashSaleEventServiceServer interface {
	CreateFlashSaleEvent(context.Context, *CreateFlashSaleEventRequest) (*CreateFlashSaleEventResponse, error)
	GetFlashSaleEvent(context.Context, *GetFlashSaleEventRequest) (*GetFlashSaleEventResponse, error)
	UpdateFlashSaleEvent(context.Context, *UpdateFlashSaleEventRequest) (*UpdateFlashSaleEventResponse, error)
	DeleteFlashSaleEvent(context.Context, *DeleteFlashSaleEventRequest) (*DeleteFlashSaleEventResponse, error)
	ListFlashSaleEvents(context.Context, *ListFlashSaleEventsRequest) (*ListFlashSaleEventsResponse, error)
	mustEmbedUnimplementedFlashSaleEventServiceServer()
}

// UnimplementedFlashSaleEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlashSaleEventServiceServer struct{}

func (UnimplementedFlashSaleEventServiceServer) CreateFlashSaleEvent(context.Context, *CreateFlashSaleEventRequest) (*CreateFlashSaleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashSaleEvent not implemented")
}
func (UnimplementedFlashSaleEventServiceServer) GetFlashSaleEvent(context.Context, *GetFlashSaleEventRequest) (*GetFlashSaleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlashSaleEvent not implemented")
}
func (UnimplementedFlashSaleEventServiceServer) UpdateFlashSaleEvent(context.Context, *UpdateFlashSaleEventRequest) (*UpdateFlashSaleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashSaleEvent not implemented")
}
func (UnimplementedFlashSaleEventServiceServer) DeleteFlashSaleEvent(context.Context, *DeleteFlashSaleEventRequest) (*DeleteFlashSaleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashSaleEvent not implemented")
}
func (UnimplementedFlashSaleEventServiceServer) ListFlashSaleEvents(context.Context, *ListFlashSaleEventsRequest) (*ListFlashSaleEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlashSaleEvents not implemented")
}
func (UnimplementedFlashSaleEventServiceServer) mustEmbedUnimplementedFlashSaleEventServiceServer() {}
func (UnimplementedFlashSaleEventServiceServer) testEmbeddedByValue()                               {}

// UnsafeFlashSaleEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashSaleEventServiceServer will
// result in compilation errors.
type UnsafeFlashSaleEventServiceServer interface {
	mustEmbedUnimplementedFlashSaleEventServiceServer()
}

func RegisterFlashSaleEventServiceServer(s grpc.ServiceRegistrar, srv FlashSaleEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlashSaleEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlashSaleEventService_ServiceDesc, srv)
}

func _FlashSaleEventService_CreateFlashSaleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashSaleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventServiceServer).CreateFlashSaleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventService_CreateFlashSaleEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventServiceServer).CreateFlashSaleEvent(ctx, req.(*CreateFlashSaleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventService_GetFlashSaleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlashSaleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventServiceServer).GetFlashSaleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventService_GetFlashSaleEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventServiceServer).GetFlashSaleEvent(ctx, req.(*GetFlashSaleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventService_UpdateFlashSaleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashSaleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventServiceServer).UpdateFlashSaleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventService_UpdateFlashSaleEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventServiceServer).UpdateFlashSaleEvent(ctx, req.(*UpdateFlashSaleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventService_DeleteFlashSaleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashSaleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventServiceServer).DeleteFlashSaleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventService_DeleteFlashSaleEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventServiceServer).DeleteFlashSaleEvent(ctx, req.(*DeleteFlashSaleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventService_ListFlashSaleEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlashSaleEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventServiceServer).ListFlashSaleEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventService_ListFlashSaleEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventServiceServer).ListFlashSaleEvents(ctx, req.(*ListFlashSaleEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashSaleEventService_ServiceDesc is the grpc.ServiceDesc for FlashSaleEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashSaleEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.FlashSaleEventService",
	HandlerType: (*FlashSaleEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlashSaleEvent",
			Handler:    _FlashSaleEventService_CreateFlashSaleEvent_Handler,
		},
		{
			MethodName: "GetFlashSaleEvent",
			Handler:    _FlashSaleEventService_GetFlashSaleEvent_Handler,
		},
		{
			MethodName: "UpdateFlashSaleEvent",
			Handler:    _FlashSaleEventService_UpdateFlashSaleEvent_Handler,
		},
		{
			MethodName: "DeleteFlashSaleEvent",
			Handler:    _FlashSaleEventService_DeleteFlashSaleEvent_Handler,
		},
		{
			MethodName: "ListFlashSaleEvents",
			Handler:    _FlashSaleEventService_ListFlashSaleEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule/product_service/flash_sale_event.proto",
}
