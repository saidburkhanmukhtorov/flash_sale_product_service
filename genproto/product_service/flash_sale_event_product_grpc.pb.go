// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule/product_service/flash_sale_event_product.proto

package product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlashSaleEventProductService_CreateFlashSaleEventProduct_FullMethodName = "/product_service.FlashSaleEventProductService/CreateFlashSaleEventProduct"
	FlashSaleEventProductService_GetFlashSaleEventProduct_FullMethodName    = "/product_service.FlashSaleEventProductService/GetFlashSaleEventProduct"
	FlashSaleEventProductService_UpdateFlashSaleEventProduct_FullMethodName = "/product_service.FlashSaleEventProductService/UpdateFlashSaleEventProduct"
	FlashSaleEventProductService_DeleteFlashSaleEventProduct_FullMethodName = "/product_service.FlashSaleEventProductService/DeleteFlashSaleEventProduct"
	FlashSaleEventProductService_ListFlashSaleEventProducts_FullMethodName  = "/product_service.FlashSaleEventProductService/ListFlashSaleEventProducts"
)

// FlashSaleEventProductServiceClient is the client API for FlashSaleEventProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FlashSaleEventProductService defines the gRPC service for managing flash sale event products.
type FlashSaleEventProductServiceClient interface {
	CreateFlashSaleEventProduct(ctx context.Context, in *CreateFlashSaleEventProductRequest, opts ...grpc.CallOption) (*CreateFlashSaleEventProductResponse, error)
	GetFlashSaleEventProduct(ctx context.Context, in *GetFlashSaleEventProductRequest, opts ...grpc.CallOption) (*GetFlashSaleEventProductResponse, error)
	UpdateFlashSaleEventProduct(ctx context.Context, in *UpdateFlashSaleEventProductRequest, opts ...grpc.CallOption) (*UpdateFlashSaleEventProductResponse, error)
	DeleteFlashSaleEventProduct(ctx context.Context, in *DeleteFlashSaleEventProductRequest, opts ...grpc.CallOption) (*DeleteFlashSaleEventProductResponse, error)
	ListFlashSaleEventProducts(ctx context.Context, in *ListFlashSaleEventProductsRequest, opts ...grpc.CallOption) (*ListFlashSaleEventProductsResponse, error)
}

type flashSaleEventProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashSaleEventProductServiceClient(cc grpc.ClientConnInterface) FlashSaleEventProductServiceClient {
	return &flashSaleEventProductServiceClient{cc}
}

func (c *flashSaleEventProductServiceClient) CreateFlashSaleEventProduct(ctx context.Context, in *CreateFlashSaleEventProductRequest, opts ...grpc.CallOption) (*CreateFlashSaleEventProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlashSaleEventProductResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventProductService_CreateFlashSaleEventProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventProductServiceClient) GetFlashSaleEventProduct(ctx context.Context, in *GetFlashSaleEventProductRequest, opts ...grpc.CallOption) (*GetFlashSaleEventProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlashSaleEventProductResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventProductService_GetFlashSaleEventProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventProductServiceClient) UpdateFlashSaleEventProduct(ctx context.Context, in *UpdateFlashSaleEventProductRequest, opts ...grpc.CallOption) (*UpdateFlashSaleEventProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFlashSaleEventProductResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventProductService_UpdateFlashSaleEventProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventProductServiceClient) DeleteFlashSaleEventProduct(ctx context.Context, in *DeleteFlashSaleEventProductRequest, opts ...grpc.CallOption) (*DeleteFlashSaleEventProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlashSaleEventProductResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventProductService_DeleteFlashSaleEventProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleEventProductServiceClient) ListFlashSaleEventProducts(ctx context.Context, in *ListFlashSaleEventProductsRequest, opts ...grpc.CallOption) (*ListFlashSaleEventProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlashSaleEventProductsResponse)
	err := c.cc.Invoke(ctx, FlashSaleEventProductService_ListFlashSaleEventProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashSaleEventProductServiceServer is the server API for FlashSaleEventProductService service.
// All implementations must embed UnimplementedFlashSaleEventProductServiceServer
// for forward compatibility.
//
// FlashSaleEventProductService defines the gRPC service for managing flash sale event products.
type FlashSaleEventProductServiceServer interface {
	CreateFlashSaleEventProduct(context.Context, *CreateFlashSaleEventProductRequest) (*CreateFlashSaleEventProductResponse, error)
	GetFlashSaleEventProduct(context.Context, *GetFlashSaleEventProductRequest) (*GetFlashSaleEventProductResponse, error)
	UpdateFlashSaleEventProduct(context.Context, *UpdateFlashSaleEventProductRequest) (*UpdateFlashSaleEventProductResponse, error)
	DeleteFlashSaleEventProduct(context.Context, *DeleteFlashSaleEventProductRequest) (*DeleteFlashSaleEventProductResponse, error)
	ListFlashSaleEventProducts(context.Context, *ListFlashSaleEventProductsRequest) (*ListFlashSaleEventProductsResponse, error)
	mustEmbedUnimplementedFlashSaleEventProductServiceServer()
}

// UnimplementedFlashSaleEventProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlashSaleEventProductServiceServer struct{}

func (UnimplementedFlashSaleEventProductServiceServer) CreateFlashSaleEventProduct(context.Context, *CreateFlashSaleEventProductRequest) (*CreateFlashSaleEventProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashSaleEventProduct not implemented")
}
func (UnimplementedFlashSaleEventProductServiceServer) GetFlashSaleEventProduct(context.Context, *GetFlashSaleEventProductRequest) (*GetFlashSaleEventProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlashSaleEventProduct not implemented")
}
func (UnimplementedFlashSaleEventProductServiceServer) UpdateFlashSaleEventProduct(context.Context, *UpdateFlashSaleEventProductRequest) (*UpdateFlashSaleEventProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashSaleEventProduct not implemented")
}
func (UnimplementedFlashSaleEventProductServiceServer) DeleteFlashSaleEventProduct(context.Context, *DeleteFlashSaleEventProductRequest) (*DeleteFlashSaleEventProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashSaleEventProduct not implemented")
}
func (UnimplementedFlashSaleEventProductServiceServer) ListFlashSaleEventProducts(context.Context, *ListFlashSaleEventProductsRequest) (*ListFlashSaleEventProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlashSaleEventProducts not implemented")
}
func (UnimplementedFlashSaleEventProductServiceServer) mustEmbedUnimplementedFlashSaleEventProductServiceServer() {
}
func (UnimplementedFlashSaleEventProductServiceServer) testEmbeddedByValue() {}

// UnsafeFlashSaleEventProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashSaleEventProductServiceServer will
// result in compilation errors.
type UnsafeFlashSaleEventProductServiceServer interface {
	mustEmbedUnimplementedFlashSaleEventProductServiceServer()
}

func RegisterFlashSaleEventProductServiceServer(s grpc.ServiceRegistrar, srv FlashSaleEventProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlashSaleEventProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlashSaleEventProductService_ServiceDesc, srv)
}

func _FlashSaleEventProductService_CreateFlashSaleEventProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashSaleEventProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventProductServiceServer).CreateFlashSaleEventProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventProductService_CreateFlashSaleEventProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventProductServiceServer).CreateFlashSaleEventProduct(ctx, req.(*CreateFlashSaleEventProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventProductService_GetFlashSaleEventProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlashSaleEventProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventProductServiceServer).GetFlashSaleEventProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventProductService_GetFlashSaleEventProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventProductServiceServer).GetFlashSaleEventProduct(ctx, req.(*GetFlashSaleEventProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventProductService_UpdateFlashSaleEventProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashSaleEventProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventProductServiceServer).UpdateFlashSaleEventProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventProductService_UpdateFlashSaleEventProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventProductServiceServer).UpdateFlashSaleEventProduct(ctx, req.(*UpdateFlashSaleEventProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventProductService_DeleteFlashSaleEventProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashSaleEventProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventProductServiceServer).DeleteFlashSaleEventProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventProductService_DeleteFlashSaleEventProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventProductServiceServer).DeleteFlashSaleEventProduct(ctx, req.(*DeleteFlashSaleEventProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleEventProductService_ListFlashSaleEventProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlashSaleEventProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleEventProductServiceServer).ListFlashSaleEventProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleEventProductService_ListFlashSaleEventProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleEventProductServiceServer).ListFlashSaleEventProducts(ctx, req.(*ListFlashSaleEventProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashSaleEventProductService_ServiceDesc is the grpc.ServiceDesc for FlashSaleEventProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashSaleEventProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.FlashSaleEventProductService",
	HandlerType: (*FlashSaleEventProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlashSaleEventProduct",
			Handler:    _FlashSaleEventProductService_CreateFlashSaleEventProduct_Handler,
		},
		{
			MethodName: "GetFlashSaleEventProduct",
			Handler:    _FlashSaleEventProductService_GetFlashSaleEventProduct_Handler,
		},
		{
			MethodName: "UpdateFlashSaleEventProduct",
			Handler:    _FlashSaleEventProductService_UpdateFlashSaleEventProduct_Handler,
		},
		{
			MethodName: "DeleteFlashSaleEventProduct",
			Handler:    _FlashSaleEventProductService_DeleteFlashSaleEventProduct_Handler,
		},
		{
			MethodName: "ListFlashSaleEventProducts",
			Handler:    _FlashSaleEventProductService_ListFlashSaleEventProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule/product_service/flash_sale_event_product.proto",
}
