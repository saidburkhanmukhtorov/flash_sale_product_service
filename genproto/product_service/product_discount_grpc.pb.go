// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule/product_service/product_discount.proto

package product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductDiscountService_CreateProductDiscount_FullMethodName = "/product_service.ProductDiscountService/CreateProductDiscount"
	ProductDiscountService_GetProductDiscount_FullMethodName    = "/product_service.ProductDiscountService/GetProductDiscount"
	ProductDiscountService_UpdateProductDiscount_FullMethodName = "/product_service.ProductDiscountService/UpdateProductDiscount"
	ProductDiscountService_DeleteProductDiscount_FullMethodName = "/product_service.ProductDiscountService/DeleteProductDiscount"
	ProductDiscountService_ListProductDiscounts_FullMethodName  = "/product_service.ProductDiscountService/ListProductDiscounts"
)

// ProductDiscountServiceClient is the client API for ProductDiscountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProductDiscountService defines the gRPC service for managing product discounts.
type ProductDiscountServiceClient interface {
	CreateProductDiscount(ctx context.Context, in *CreateProductDiscountRequest, opts ...grpc.CallOption) (*CreateProductDiscountResponse, error)
	GetProductDiscount(ctx context.Context, in *GetProductDiscountRequest, opts ...grpc.CallOption) (*GetProductDiscountResponse, error)
	UpdateProductDiscount(ctx context.Context, in *UpdateProductDiscountRequest, opts ...grpc.CallOption) (*UpdateProductDiscountResponse, error)
	DeleteProductDiscount(ctx context.Context, in *DeleteProductDiscountRequest, opts ...grpc.CallOption) (*DeleteProductDiscountResponse, error)
	ListProductDiscounts(ctx context.Context, in *ListProductDiscountsRequest, opts ...grpc.CallOption) (*ListProductDiscountsResponse, error)
}

type productDiscountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductDiscountServiceClient(cc grpc.ClientConnInterface) ProductDiscountServiceClient {
	return &productDiscountServiceClient{cc}
}

func (c *productDiscountServiceClient) CreateProductDiscount(ctx context.Context, in *CreateProductDiscountRequest, opts ...grpc.CallOption) (*CreateProductDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductDiscountResponse)
	err := c.cc.Invoke(ctx, ProductDiscountService_CreateProductDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDiscountServiceClient) GetProductDiscount(ctx context.Context, in *GetProductDiscountRequest, opts ...grpc.CallOption) (*GetProductDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductDiscountResponse)
	err := c.cc.Invoke(ctx, ProductDiscountService_GetProductDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDiscountServiceClient) UpdateProductDiscount(ctx context.Context, in *UpdateProductDiscountRequest, opts ...grpc.CallOption) (*UpdateProductDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductDiscountResponse)
	err := c.cc.Invoke(ctx, ProductDiscountService_UpdateProductDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDiscountServiceClient) DeleteProductDiscount(ctx context.Context, in *DeleteProductDiscountRequest, opts ...grpc.CallOption) (*DeleteProductDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductDiscountResponse)
	err := c.cc.Invoke(ctx, ProductDiscountService_DeleteProductDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDiscountServiceClient) ListProductDiscounts(ctx context.Context, in *ListProductDiscountsRequest, opts ...grpc.CallOption) (*ListProductDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductDiscountsResponse)
	err := c.cc.Invoke(ctx, ProductDiscountService_ListProductDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductDiscountServiceServer is the server API for ProductDiscountService service.
// All implementations must embed UnimplementedProductDiscountServiceServer
// for forward compatibility.
//
// ProductDiscountService defines the gRPC service for managing product discounts.
type ProductDiscountServiceServer interface {
	CreateProductDiscount(context.Context, *CreateProductDiscountRequest) (*CreateProductDiscountResponse, error)
	GetProductDiscount(context.Context, *GetProductDiscountRequest) (*GetProductDiscountResponse, error)
	UpdateProductDiscount(context.Context, *UpdateProductDiscountRequest) (*UpdateProductDiscountResponse, error)
	DeleteProductDiscount(context.Context, *DeleteProductDiscountRequest) (*DeleteProductDiscountResponse, error)
	ListProductDiscounts(context.Context, *ListProductDiscountsRequest) (*ListProductDiscountsResponse, error)
	mustEmbedUnimplementedProductDiscountServiceServer()
}

// UnimplementedProductDiscountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductDiscountServiceServer struct{}

func (UnimplementedProductDiscountServiceServer) CreateProductDiscount(context.Context, *CreateProductDiscountRequest) (*CreateProductDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductDiscount not implemented")
}
func (UnimplementedProductDiscountServiceServer) GetProductDiscount(context.Context, *GetProductDiscountRequest) (*GetProductDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDiscount not implemented")
}
func (UnimplementedProductDiscountServiceServer) UpdateProductDiscount(context.Context, *UpdateProductDiscountRequest) (*UpdateProductDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductDiscount not implemented")
}
func (UnimplementedProductDiscountServiceServer) DeleteProductDiscount(context.Context, *DeleteProductDiscountRequest) (*DeleteProductDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductDiscount not implemented")
}
func (UnimplementedProductDiscountServiceServer) ListProductDiscounts(context.Context, *ListProductDiscountsRequest) (*ListProductDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductDiscounts not implemented")
}
func (UnimplementedProductDiscountServiceServer) mustEmbedUnimplementedProductDiscountServiceServer() {
}
func (UnimplementedProductDiscountServiceServer) testEmbeddedByValue() {}

// UnsafeProductDiscountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductDiscountServiceServer will
// result in compilation errors.
type UnsafeProductDiscountServiceServer interface {
	mustEmbedUnimplementedProductDiscountServiceServer()
}

func RegisterProductDiscountServiceServer(s grpc.ServiceRegistrar, srv ProductDiscountServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductDiscountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductDiscountService_ServiceDesc, srv)
}

func _ProductDiscountService_CreateProductDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDiscountServiceServer).CreateProductDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDiscountService_CreateProductDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDiscountServiceServer).CreateProductDiscount(ctx, req.(*CreateProductDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDiscountService_GetProductDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDiscountServiceServer).GetProductDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDiscountService_GetProductDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDiscountServiceServer).GetProductDiscount(ctx, req.(*GetProductDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDiscountService_UpdateProductDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDiscountServiceServer).UpdateProductDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDiscountService_UpdateProductDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDiscountServiceServer).UpdateProductDiscount(ctx, req.(*UpdateProductDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDiscountService_DeleteProductDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDiscountServiceServer).DeleteProductDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDiscountService_DeleteProductDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDiscountServiceServer).DeleteProductDiscount(ctx, req.(*DeleteProductDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDiscountService_ListProductDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDiscountServiceServer).ListProductDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDiscountService_ListProductDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDiscountServiceServer).ListProductDiscounts(ctx, req.(*ListProductDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductDiscountService_ServiceDesc is the grpc.ServiceDesc for ProductDiscountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductDiscountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.ProductDiscountService",
	HandlerType: (*ProductDiscountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductDiscount",
			Handler:    _ProductDiscountService_CreateProductDiscount_Handler,
		},
		{
			MethodName: "GetProductDiscount",
			Handler:    _ProductDiscountService_GetProductDiscount_Handler,
		},
		{
			MethodName: "UpdateProductDiscount",
			Handler:    _ProductDiscountService_UpdateProductDiscount_Handler,
		},
		{
			MethodName: "DeleteProductDiscount",
			Handler:    _ProductDiscountService_DeleteProductDiscount_Handler,
		},
		{
			MethodName: "ListProductDiscounts",
			Handler:    _ProductDiscountService_ListProductDiscounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule/product_service/product_discount.proto",
}
